{"version":3,"file":"kori.js","sources":["../../../../../src/commonMain/kotlin/me/wener/kori/logic/Logics.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/MQM.kt","collections/Sets.kt","collections/Collections.kt","util/Preconditions.kt","generated/_Arrays.kt","generated/_Strings.kt","collections/Maps.kt","generated/_Collections.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","../../../../../src/commonMain/kotlin/me/wener/kori/math/Mathx.kt","../../../../../src/commonMain/kotlin/me/wener/kori/combine/Combinatorics.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/LogicExtension.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/PetrickMethods.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/QM.kt","../../../../../src/commonMain/kotlin/me/wener/kori/util/UtilExtension.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/exp/expression.kt","generated/_ArraysJs.kt","../../../../../../../../../../dummy.kt","kotlin/string.kt","../../../../../src/commonMain/kotlin/me/wener/kori/logic/exp/rewrite.kt","util/Standard.kt","collections/Iterators.kt","../../../../../src/commonMain/kotlin/me/wener/kori/math/MathxExtension.kt","util/HashCode.kt","../../../../../src/commonMain/kotlin/sample/Sample.kt","../../../../../src/jsMain/kotlin/sample/SampleJs.kt"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package me.wener.kori.logic.exp\n\nimport me.wener.kori.util.addHasCode\nimport kotlin.js.JsName\nimport kotlin.jvm.JvmStatic\n\nconst val AlgebraAnd = '\u2227'\nconst val AlgebraOr = '\u2228'\nconst val AlgebraNot = '\u00ac'\n\nconst val NULL: Char = 0.toChar()\n\nobject LogicExpressions {\n  /**\n   * Parse to syntax tree\n   */\n  @JsName(\"parse\")\n  @JvmStatic\n  fun parse(exp: String): Expression {\n    return LogicalExpressionParser(exp).parse();\n  }\n\n  /**\n   * A simple expression evaluator\n   */\n  @JsName(\"eval\")\n  @JvmStatic\n  fun eval(e: Expression, varEval: (name: String) -> Boolean): Boolean = when (e) {\n    is Condition -> {\n      when (e.operator) {\n        ConditionOperator.AND -> eval(e.left, varEval) && eval(e.right, varEval)\n        ConditionOperator.OR -> eval(e.left, varEval) || eval(e.right, varEval)\n        ConditionOperator.XOR -> eval(e.left, varEval) xor eval(e.right, varEval)\n      }\n    }\n    is Negative -> !eval(e.expression, varEval)\n    is Parentheses -> eval(e.expression, varEval)\n    is Variable -> varEval(e.name)\n    else -> throw IllegalArgumentException(\"unexpected expression type ${e::class} $e\")\n  }\n\n  @JsName(\"resolve\")\n  @JvmStatic\n  fun resolve(e: Expression): Pair<List<String>, List<IntArray>> {\n    val variables = variables(e)\n    val results = mutableListOf<IntArray>()\n    val n = variables.size\n\n    for (cur in exhaustive(n)) {\n      if (eval(e) {\n          val idx = variables.indexOf(it)\n          cur[idx] == 1\n        }) {\n        results.add(cur.copyOf())\n      }\n    }\n    return Pair(variables, results);\n  }\n\n  fun exhaustive(n: Int): Sequence<IntArray> {\n    val result = IntArray(n)\n    val indexes = IntArray(n)\n    return sequence {\n      for (i in 0..n) {\n        ones(result, indexes, 0, n - 1, 0, i)\n      }\n    }\n  }\n\n  /**\n   * Visit all expression node\n   */\n  @JsName(\"loop\")\n  @JvmStatic\n  fun loop(e: Expression, visitor: (e: Expression) -> Unit) {\n    visitor(e)\n    when (e) {\n      is Condition -> {\n        loop(e.left, visitor)\n        loop(e.right, visitor)\n      }\n      is Negative -> loop(e.expression, visitor)\n      is Parentheses -> loop(e.expression, visitor)\n    }\n  }\n\n  /**\n   * Extract variable names from expression\n   */\n  @JsName(\"variables\")\n  @JvmStatic\n  fun variables(e: Expression): List<String> {\n    val names = linkedSetOf<String>()\n    loop(e) {\n      if (it is Variable) {\n        names.add(it.name)\n      }\n    }\n    return names.toList()\n  }\n\n  @JsName(\"toExpressionString\")\n  @JvmStatic\n  fun toExpressionString(e: Expression): String = when (e) {\n    is Condition -> \"${toExpressionString(e.left)} ${e.operator.toOperator()} ${toExpressionString(e.right)}\"\n    is Negative -> \"!${toExpressionString(e.expression)}\"\n    is Parentheses -> \"(${toExpressionString(e.expression)})\"\n    is Variable -> e.name\n    else -> throw IllegalArgumentException(\"unexpected to string of $e\")\n  }\n\n  @JsName(\"toAlgebraString\")\n  @JvmStatic\n  fun toAlgebraString(e: Expression): String {\n    return when (e) {\n      is Condition -> \"${e.left.toAlgebraString()} ${e.operator.toAlgebraOperator()} ${e.right.toAlgebraString()}\"\n      is Negative -> \"$AlgebraNot${e.expression.toAlgebraString()}\"\n      is Parentheses -> \"(${e.expression.toAlgebraString()})\"\n      is Variable -> e.name\n      else -> throw IllegalArgumentException(\"unexpected to string of $e\")\n    }\n  }\n\n  fun printSyntaxTree(\n    e: Expression,\n    out: (s: String) -> Unit = { println(it) },\n    indent: Int = 0\n  ) {\n    when (e) {\n      is Condition -> {\n        out(\"${\"  \".repeat(indent)}Condition[operator=${e.operator}] - ${e.toExpressionString()}\")\n        printSyntaxTree(e.left, out, indent + 1)\n        printSyntaxTree(e.right, out, indent + 1)\n      }\n      is Negative -> {\n        out(\"${\"  \".repeat(indent)}Negative - ${e.toExpressionString()}\")\n        printSyntaxTree(e.expression, out, indent + 1)\n      }\n      is Parentheses -> {\n        out(\"${\"  \".repeat(indent)}Parentheses - ${e.toExpressionString()}\")\n        printSyntaxTree(e.expression, out, indent + 1)\n      }\n      is Variable -> out(\"${\"  \".repeat(indent)}Variable[name=${e.name}]\")\n      else -> throw IllegalArgumentException(\"unexpected to string of $e\")\n    }\n  }\n}\n\nfun Expression.toAlgebraString(): String = LogicExpressions.toAlgebraString(this)\n\ninterface Expression {\n\n  fun parentheses(): Expression = Parentheses(this)\n\n  fun not(): Expression = Negative(this)\n\n  @JsName(\"and\")\n  fun and(right: Expression): Expression = join(right, ConditionOperator.AND)\n\n  @JsName(\"or\")\n  fun or(right: Expression): Expression = join(right, ConditionOperator.OR)\n\n  @JsName(\"join\")\n  fun join(right: Expression, op: ConditionOperator): Expression = Condition(op, this, right)\n\n  fun toExpressionString(): String = LogicExpressions.toExpressionString(this)\n}\n\ndata class Parentheses(var expression: Expression) : Expression\ndata class Condition(var operator: ConditionOperator, var left: Expression, var right: Expression) : Expression {\n  override fun equals(other: Any?): Boolean {\n    if (other !is Condition || operator != other.operator) {\n      return false\n    }\n\n    // a || b  <-> b || a\n    val a = left.hashCode()\n    val b = right.hashCode()\n    val oa = other.left.hashCode()\n    val ob = other.right.hashCode()\n\n    return if (a > b) {\n      if (oa > ob) {\n        left == other.left && right == other.right\n      } else {\n        left == other.right && right == other.left\n      }\n    } else {\n      if (oa > ob) {\n        left == other.right && right == other.left\n      } else {\n        left == other.left && right == other.right\n      }\n    }\n  }\n\n  override fun hashCode(): Int {\n    // a || b  <-> b || a\n    var r = 1\n    r = r.addHasCode(operator)\n    val a = left.hashCode()\n    val b = right.hashCode()\n    if (a > b) {\n      r = r.addHasCode(a).addHasCode(b)\n    } else {\n      r = r.addHasCode(b).addHasCode(a)\n    }\n    return r\n  }\n}\n\ndata class Negative(var expression: Expression) : Expression\ndata class Variable(var name: String) : Expression\n\nenum class ConditionOperator {\n  AND, OR, XOR\n}\n\nfun ConditionOperator.toOperator() = when (this) {\n  ConditionOperator.AND -> \"&&\"\n  ConditionOperator.OR -> \"||\"\n  ConditionOperator.XOR -> \"^\"\n}\n\nfun ConditionOperator.toAlgebraOperator() = when (this) {\n  ConditionOperator.AND -> AlgebraAnd\n  ConditionOperator.OR -> AlgebraOr\n  else -> throw IllegalArgumentException(\"no algebra operator for $this\")\n}\n\n\nsuspend fun SequenceScope<IntArray>.ones(\n  result: IntArray,\n  indexes: IntArray,\n  start: Int,\n  end: Int,\n  index: Int,\n  n: Int\n) {\n  if (index == n) {\n    // reset\n    result.fill(0)\n    // one\n    for (i in 0 until n) {\n      result[indexes[i]] = 1\n    }\n    yield(result)\n  } else {\n    var i = start\n    while (i <= end && end - i + 1 >= n - index) {\n      indexes[index] = i\n      ones(result, indexes, i + 1, end, index + 1, n)\n      i++\n    }\n  }\n}\n\nfun IntArray.fill(v: Int) {\n  val n = this.size\n  for (i in 0 until n) {\n    this[i] = v\n  }\n}\n\nfun IntArray.replace(f: Int, t: Int) {\n  val n = this.size\n  for (i in 0 until n) {\n    if (this[i] == f) {\n      this[i] = t\n    }\n  }\n}\n\n\n/**\n * A super simple boolean expression parser\n *\n * * support and/or/xor/not - C-like syntax or boolean algebra syntax\n * * support parentheses\n * * support `[a-zA-Z][a-zA-Z0-9]*` variable name\n * * subclass to add customized rules\n */\nprivate class LogicalExpressionParser(val exp: String) {\n  var idx = 0\n  var c: Char = NULL\n  var lastRead = false\n\n  /**\n   * Track current priority - (),!,&&,||\n   *\n   * * parentheses add a scope\n   * * prefix is higher than logical operator\n   */\n  var priorities = mutableListOf(0)\n\n  fun parse(): Expression {\n    idx = 0\n    val e = parseExpression()\n    unexpected(NULL, read())\n    return e\n  }\n\n  fun parseExpression(): Expression {\n    read()\n    return parseOr()\n  }\n\n  fun parseOr(): Expression {\n    val left = parseAnd()\n    return withPriority(0) {\n      when (read()) {\n        '|' -> {\n          next('|')\n          Condition(ConditionOperator.OR, left, parseExpression())\n        }\n        AlgebraOr -> Condition(ConditionOperator.OR, left, parseExpression())\n        else -> {\n          unread()\n          null\n        }\n      }\n    } ?: left\n  }\n\n  fun parseAnd(): Expression {\n    val left = parseXor()\n\n    return withPriority(1) {\n      when (read()) {\n        '&' -> {\n          next('&')\n          Condition(ConditionOperator.AND, left, parseExpression())\n        }\n        AlgebraAnd -> Condition(ConditionOperator.AND, left, parseExpression())\n        else -> {\n          unread()\n          null\n        }\n      }\n    } ?: left\n  }\n\n  fun parseXor(): Expression {\n    val left = parseNegative()\n\n    return withPriority(3) {\n      when (read()) {\n        '^' -> Condition(ConditionOperator.XOR, left, parseExpression())\n        else -> {\n          unread()\n          null\n        }\n      }\n    } ?: left\n  }\n\n  fun unread() {\n    if (lastRead) {\n      idx--\n    }\n  }\n\n  fun <T> withPriority(v: Int, f: () -> T?): T? {\n    if (v < priorities.last()) {\n      return null\n    }\n    priorities.add(v)\n    val t = f()\n    priorities.removeAt(priorities.lastIndex)\n    return t\n  }\n\n  protected fun parseNegative(): Expression {\n    if (c == '!' || c == AlgebraNot) {\n      return withPriority(4) {\n        Negative(expression = parseExpression())\n      }!!\n    }\n    return parseParentheses()\n  }\n\n  protected fun parseParentheses(): Expression {\n    if (c == '(') {\n      priorities.add(0)\n      val e = Parentheses(expression = parseExpression())\n      unexpected(')', read())\n      priorities.removeAt(priorities.lastIndex)\n      return e\n    }\n\n    return parseVariable()\n  }\n\n  protected fun parseVariable(): Expression {\n    if (isVariableLeading(c)) {\n      val s = idx - 1\n      while (isVariablePending(next()));\n      unread()\n      val name = exp.substring(s, idx)\n      return Variable(name)\n    }\n    throw LogicalExpressionSyntaxException(\"unexpected '${c.toMessageString()}' at $idx\")\n  }\n\n  protected fun isVariableLeading(c: Char): Boolean {\n    return (c in 'a'..'z') || (c in 'A'..'Z')\n  }\n\n  protected fun isVariablePending(c: Char): Boolean {\n    return isVariableLeading(c) || (c in '0'..'9')\n  }\n\n  private fun read(): Char {\n    while (next() == ' ');\n    return c\n  }\n\n  protected fun next(): Char {\n    if (idx >= exp.length) {\n      lastRead = false\n      c = NULL\n    } else {\n      lastRead = true\n      c = exp[idx++]\n    }\n    return c\n  }\n\n  protected fun next(expected: Char): Char {\n    val c = next()\n    unexpected(expected, c)\n    return c\n  }\n\n  private fun unexpected(expected: Char, c: Char) {\n    if (expected != c) {\n      throw LogicalExpressionSyntaxException(\"expected '${expected.toMessageString()}' got '${c.toMessageString()}' at $idx\")\n    }\n  }\n}\n\nprivate fun Char.toMessageString() = if (this == NULL) \"EOF\" else \"$this\"\n\nclass LogicalExpressionSyntaxException(message: String) : RuntimeException(message)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null,null,null,null,null],"names":[],"mappings":"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"}